import Head from "next/head";
import Router, { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { FormattedMessage } from "react-intl";
import { useSelector } from "react-redux";
import Logo from '../../src/assets/images/logo-aperifilm.svg';
import { CustomMessage, CustomSelect, Image, Tabs, TitlePage } from "../../src/atoms";
import { Card } from "../../src/components";
import { langConverter, parseContext, textToPath, tmdbApiKey } from "../../src/js/utility";
import { HomeContainer, Keyword, ResultsContainer, SearchContainer, SelectsContainer, TabsContainer, UserListsContainer } from "../../src/styles/Pages/userListsStyle";
import Montserrat from "../../src/typography/montserrat";
import { AtSymbolIcon, EyeIcon, HeartIcon, HomeIcon, InformationCircleIcon, TrendingUpIcon } from "@heroicons/react/solid";
import AperitifBottleDisable from "../../src/assets/icons/aperitif-bottle-disable.png"
import AperitifBottleActive from "../../src/assets/icons/aperitif-bottle-active.png"
import theme from "../../src/theme";
import En from "../../lang/en.json";
import It from "../../lang/it.json";
import { genresList } from "../../src/js/genreList";
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import Select from '@mui/material/Select';

export async function getServerSideProps(context) {
  try {
    const query = parseContext(context.query);
    
    return {
      props: {
        query
      },
    };
  } catch (err) {
    console.error(err);
    return {
      props: {
        err: "Something went wrong",
      },
    };
  }
}

export default function UserLists({query}) {
  const userLanguageState = useSelector((state) => state.userData?.language);
  const userListProductsState = useSelector((state) => state.userData?.list_products[0]);

  const tabsListDefault = [
    {
      id: 'favorite',
      label: 'menuLinkTitleFavorite',
      number: null
    },
    {
      id: 'vote',
      label: 'menuLinkTitleVoted',
      number: null
    },
    {
      id: 'watch',
      label: 'menuLinkTitleToWatch',
      number: null
    },
  ]
  let selectGenresOptions = genresList.reduce((acc, el) => {
    return [
      ...acc,
      {
        value: String(el.id),
        label: el[userLanguageState]
      }
    ]
  }, []);

  selectGenresOptions = [
    {
      value: 'all-genre',
      label: userLanguageState === 'it' ? It['yourListsSelectGenreAll'] : En['yourListsSelectGenreAll']
    },
    ...selectGenresOptions,
  ]

  const router = useRouter();
  const [tabsList, setTabzsList] = useState(tabsListDefault);
  const [userProductsList, setUserProductsList] = useState({
    collections: [],
    movie: [],
    tv: []
  });
  const [collection, setCollection] = useState({});
  const [resultsList, setResultsList] = useState([]);
  const [page, setPage] = useState(1);
  const [queryType, setQueryType] = useState('favorite');
  const [activeTab, setActiveTab] = useState(tabsList[0]);
  const [productsDetails, setProductDetails] = useState([]);
  const [userLanguage, setUserLanguage] = useState(router.locale);

  useEffect(() => {
    setQueryType(query.slug);
  }, [query])

  useEffect(() => {
    setUserProductsList(userListProductsState?.lists)
  }, [userListProductsState])

  useEffect(() => {
    setActiveTab(tabsListDefault.filter(el => el.id === queryType)[0]);
  }, [queryType])

  useEffect(() => {setUserLanguage(userLanguageState)}, [userLanguageState])
  
  useEffect(() => {
    getDetails();
  }, [userLanguage, userProductsList, activeTab, queryType]);




  const getDetails = async () => {

  }


  const onChangeTab = tab => {
    setActiveTab(tab);
    router.push(`/user/${tab.id}`);
  };

  const handleOnChangeOrder = (e) => {
    setValueSelectOrder(e.target.value);
	}

  const handleOnChangeType = (el) => {
		setValueSelectType(el);
	}

  const handleOnChangeGenre = (el) => {
		setValueSelectGenre(el);
	}

  return (
    <UserListsContainer>
      <Head>
        <title>Your Lists | Aperifilm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#e30000" />
        <meta name="msapplication-TileColor" content="#ffc40d" />
        <meta name="theme-color" content="#ffffff"></meta>
      </Head>

      <TitlePage title="sidebarYourListTitle" />

      <TabsContainer>
        <Tabs
          sizeButtons="large"
          selected={activeTab}
          onChange={onChangeTab}
          tabsList={tabsList}
        />
      </TabsContainer>
      
      <ResultsContainer>
      </ResultsContainer>
    </UserListsContainer>
  );
}
