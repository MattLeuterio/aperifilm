import Head from "next/head";
import Router, { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { FormattedMessage } from "react-intl";
import { useSelector } from "react-redux";
import { Button, Icon, Image, TitlePage } from "../../src/atoms";
import { ActionsWrapper, Error, ErrorWrapper, FieldsWrapper, Form, Input, Main, UserSettingsContainer } from "../../src/styles/Pages/userSettingsStyle";
import en from "../../lang/en.json";
import it from "../../lang/it.json";
import { Typography } from "@mui/material";
import theme from "../../src/theme";
import { updateUser } from "../api/auth/users";
import { useUser } from "@auth0/nextjs-auth0";
import { useForm } from 'react-hook-form';
import { ExclamationCircleIcon } from "@heroicons/react/outline";


const initialNewUserValues = [
  {
    id: 'email',
    label: "settingsLabelEmail",
    value: "",
  },
  {
    id: 'nickname',
    label: "settingsLabelNickname",
    value: "",
  },
  {
    id: 'picture',
    label: "settingsLabelPicture",
    value: "",
  },
]

export default function UserLists() {
  const { user, error, isLoading } = useUser();
  const router = useRouter();
  const userState = useSelector((state) => state?.userData);
  const userLanguageState = useSelector((state) => state.userData?.language);

  const [ initialUserValues, setInitialUserValues] = useState(initialNewUserValues);
  const [newUserValues, setNewUserValues] = useState(initialNewUserValues);

  useEffect(() => {
    if (!user) Router.push('/');
  }, [user])

  const setNaming = (data) => data?.name || data?.given_name || data?.nickname || data?.email || 'Settings';

  useEffect(() => {
    setNewUserValues(initialNewUserValues.map(el => {
      return ({ ...el, value: userState[el.id]})
    }))
    setInitialUserValues(initialNewUserValues.map(el => {
      return ({ ...el, value: userState[el.id]})
    }))
  }, [userState])

  useEffect(() => {
    newUserValues.map(el => setValue(el.id, el.value));
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [newUserValues])

  const resetAll = () => {
    newUserValues.map(el => setValue(el.id, el.value))
  }
  
  const { register, handleSubmit, formState: { errors }, setValue } = useForm();
  const onSubmit = (data) => {
    const json = userState.list_products[0].lists;

    const body = {
      "email": data.email,
      "nickname": data.nickname,
      "picture": data.picture,
      "sub": userState.sub,
      "given_name": userState.given_name,
      "family_name": userState.family_name,
      "locale": router.locale,
      "updated_at": userState.updated_at,
      "language": userState.language,
      "list_products": JSON.stringify(json)
    }

    updateUser(userState.record_id, body).then(() => {
      location.reload();
    });
  };

  if (user) {
    return (
      <UserSettingsContainer>
        <Head>
          <title>{setNaming(userState)} | Aperifilm</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
          <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
          <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
          <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
          <link rel="manifest" href="/site.webmanifest" />
          <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#e30000" />
          <meta name="msapplication-TileColor" content="#ffc40d" />
          <meta name="theme-color" content="#ffffff"></meta>
        </Head>
  
        <TitlePage hasBackButton primaryTitle={"settingsTitlePage"} title={`${setNaming(userState)}`} />
  
        {userState?.name && (
          <Main>            
            <Form onSubmit={handleSubmit(onSubmit)}>

              <FieldsWrapper>
                <Typography fontSize={14} fontWeight="bold">
                  <FormattedMessage defaultMessage={"settingsLabelNickname"} id={"settingsLabelNickname"} />*
                </Typography>
                <Input 
                  type="text" 
                  placeholder={`${userLanguageState === 'it' ? it["settingsLabelNickname"] : en["settingsLabelNickname"]}`} 
                  {...register("nickname", {
                    required: {
                      value: true,
                      message: `${userLanguageState === 'it' ? it["settingsErrorMessageRequired"] : en["settingsErrorMessageRequired"]}`
                    },
                    minLength: {
                      value: 3,
                      message: `${userLanguageState === 'it' ? it["settingsErrorMessageMinLenght"] : en["settingsErrorMessageMinLenght"]}`
                    }, 
                    maxLength: {
                      value: 20,
                      message: `${userLanguageState === 'it' ? it["settingsErrorMessageMaxLenght"] : en["settingsErrorMessageMaxLenght"]}`
                    }
                  })} 
                  />
                  {errors?.nickname && (
                  <ErrorWrapper>
                    <Error>
                      <Icon
                        className="error-icn"
                        width="24px"
                        height="24px"
                        stroke={theme.colors.mainBrandColors.light}
                      >
                          <ExclamationCircleIcon />
                      </Icon>
                      <Typography marginLeft={"8px"}>
                        {errors?.nickname?.message}
                      </Typography>
                    </Error>
                  </ErrorWrapper>
                )}
              </FieldsWrapper>

              <FieldsWrapper>
                <Typography fontSize={14} fontWeight="bold">
                  <FormattedMessage defaultMessage={"settingsLabelEmail"} id={"settingsLabelEmail"} />*
                </Typography>
                <Input 
                  type="text" 
                  placeholder={`${userLanguageState === 'it' ? it["settingsLabelEmail"] : en["settingsLabelEmail"]}`} 
                  {...register("email", 
                  {
                    required: {
                      value: true,
                      message: `${userLanguageState === 'it' ? it["settingsErrorMessageRequired"] : en["settingsErrorMessageRequired"]}`
                    },
                    pattern: {
                      value: /^\S+@\S+$/i,
                      message: `${userLanguageState === 'it' ? it["settingsErrorMessageEmailInvalid"] : en["settingsErrorMessageEmailInvalid"]}`
                    }
                  })} 
                />
                {errors?.email && (
                  <ErrorWrapper>
                    <Error>
                      <Icon
                          className="error-icn"
                          width="24px"
                          height="24px"
                          stroke={theme.colors.mainBrandColors.light}
                        >
                          <ExclamationCircleIcon />
                      </Icon>
                      <Typography marginLeft={"8px"}>
                        {errors?.email?.message}
                      </Typography>
                    </Error>
                  </ErrorWrapper>
                )}
              </FieldsWrapper>

              <FieldsWrapper>
                <Typography fontSize={14} fontWeight="bold">
                  <FormattedMessage defaultMessage={"settingsLabelPicture"} id={"settingsLabelPicture"} />*
                </Typography>
                <Input 
                  type="url" 
                  placeholder={`${userLanguageState === 'it' ? it["settingsLabelPicture"] : en["settingsLabelPicture"]}`} 
                  {...register("picture", {
                    required: {
                      value: true,
                      message: `${userLanguageState === 'it' ? it["settingsErrorMessageRequired"] : en["settingsErrorMessageRequired"]}`
                    }, 
                    pattern: {
                      value: /^(http(s):\/\/.)[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$/i,
                      message: `${userLanguageState === 'it' ? it["settingsErrorMessageUrlInvalid"] : en["settingsErrorMessageUrlInvalid"]}`
                    }
                  })} 
                />
                {errors?.picture && (
                  <ErrorWrapper>
                    <Error>
                      <Icon
                          className="error-icn"
                          width="24px"
                          height="24px"
                          stroke={theme.colors.mainBrandColors.light}
                        >
                          <ExclamationCircleIcon />
                      </Icon>
                      <Typography marginLeft={"8px"}>
                        {errors?.picture?.message}
                      </Typography>
                    </Error>
                  </ErrorWrapper>
                )}
              </FieldsWrapper>

              <ActionsWrapper>
                
              <Button
                className="settings-btn--restore"
                handleOnClick={() => resetAll()}
                active
                text="settingsLabelButtonRestore"
              >
              </Button>

                <Input type="submit" value={`${userLanguageState === 'it' ? it["settingsLabelButtonSave"] : en["settingsLabelButtonSave"]}`} />
              </ActionsWrapper>
            </Form>





            {/* <ActionsWrapper>
              <Button
                className="settings-btn--restore"
                handleOnClick={() => resetAll()}
                active
                text="settingsLabelButtonRestore"
              >
              </Button>
              <Button
                className="settings-btn--save"
                handleOnClick={() => handleOnClickSave()}
                active
                text="settingsLabelButtonSave"
              >
              </Button>
            </ActionsWrapper> */}
          </Main>
        )}
  
        
      </UserSettingsContainer>
    );
  }
}
