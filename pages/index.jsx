import Head from "next/head";
import { FormattedMessage } from "react-intl";
import { useSelector } from "react-redux";
import { GoTo, Icon, Image, TitlePage } from "../src/atoms";
import { Container, HomeContainer, Row, RowCards, RowHeader, Welcome, WelcomeDescription, WelcomeTitle } from "../src/styles/Pages/style";
import theme from "../src/theme";
import Montserrat from "../src/typography/montserrat";
import IconWelcome from "../src/assets/icons/apericheers-red.png";
import { XCircleIcon } from '@heroicons/react/outline';
import { useEffect, useState } from "react";
import { Card } from "../src/components";
import useMediaQuery from "../src/hooks/useMediaQuery";
import { ArrowNarrowRightIcon } from "@heroicons/react/outline";
import { FireIcon } from "@heroicons/react/solid";

export async function getServerSideProps() {
  try {
    const res = await fetch('https://api.themoviedb.org/3/discover/movie?api_key=e2330ecaa641a077ab62520c44ab636f&language=it-IT');
    const discoverMovieList = await res.json()
    
    return {
      props: {
        discoverMovieList
      },
    };
  } catch (err) {
    console.error(err);
    return {
      props: {
        err: "Something went wrong",
      },
    };
  }
}

export default function Home({discoverMovieList}) {
  const [welcomeVisible, setWelcomeVisible] = useState(true);
  const [discoverMovieListState, setDiscoverMovieListState] = useState([]);
  const user = useSelector((state) => state.userData);
  const userLanguageState = useSelector((state) => state.userData.language);
  const userProductList = useSelector((state) => state.userData.list_products);

  //console.log('userProductList', userProductList);
  const isTablet = useMediaQuery(769);

  useEffect(() => {
    setDiscoverMovieListState(discoverMovieList.results.slice(0, 2));
  }, [discoverMovieList])

  RowCards.TYPE = {
    DISCOVER: 'discover',
    DEFAULT: 'default'
  }

  return (
    <HomeContainer>
      <Head>
        <title>Discover | Aperifilm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#e30000" />
        <meta name="msapplication-TileColor" content="#ffc40d" />
        <meta name="theme-color" content="#ffffff"></meta>
      </Head>

      {user?.email ? (
        <Container>
          {user && Object.entries(user).map(([key, value], i) => {
            if (key !== 'list_products' && key !== 'favorite' && key !== 'voted' && key !== 'towatch') {
              return (
                <p key={i}>{i + 1} - {key}: {value}</p>
              )
            } 
            })}

            {user?.favorite && (
              <>
                <p><FormattedMessage defaultMessage={"menuLinkTitleFavorite"} id={"menuLinkTitleFavorite"} /></p>
                {user.favorite.map((elm, index) => (
                  <p key={index}>{elm.title}</p>
                ))}
              </>
            )}

            {user?.voted && (
              <>
                <p><FormattedMessage defaultMessage={"menuLinkTitleVoted"} id={"menuLinkTitleVoted"} /></p>
                {user.voted.map((elm, index) => (
                  <p key={index}>{elm.title}</p>
                ))}
              </>
            )}

            {user?.towatch && (
              <>
                <p><FormattedMessage defaultMessage={"menuLinkTitleToWatch"} id={"menuLinkTitleToWatch"} /></p>
                {user.towatch.map((elm, index) => (
                  <p key={index}>{elm.title}</p>
                ))}
              </>
            )}
            
        </Container>
      ) : (
        <Container>
          {welcomeVisible && (
            <Welcome>
              <Icon
                className="welcome-close-icon"
                handleOnClick={() => setWelcomeVisible(false)}
                stroke={theme.colors.element.dark}
                fill="transparent"
                width="25px"
                height="25px"
              >
                <XCircleIcon />
              </Icon>
              <WelcomeTitle>
              <Image
                className="apericheers-red-icon" 
                src={IconWelcome.src}
                alt="aperifilm.com logo" 
                width="32px"
                layout="fixed" 
              />
                <Montserrat htmlAttribute={'span'} type="h1">
                  {user.language === 'it' ? 'Benvenuto!' : 'Welcome!'}
                </Montserrat>
              </WelcomeTitle>
              <WelcomeDescription>
                <Montserrat type="h1">
                  {user.language === 'it' ? (
                    <Montserrat configuration={{lineHeight: '17px'}}>
                      <a href="/api/auth/login">
                        <Montserrat htmlAttribute={'span'} type="link">Crea il tuo account</Montserrat>
                      </a> e tieni traccia di tutti i <strong>film</strong> e le <strong>serie tv</strong> sulle quali hai messo gli occhi. <br />
                      Vota usando i nostri <Montserrat htmlAttribute={'span'} configuration={{color: theme.colors.mainBrandColors.dark, fontStyle: 'italic'}}>Aperitivini</Montserrat> che contengono la vitamina F (Felicitina). Tutto completamente gratuito.
                    </Montserrat>
                  ) : (
                    <Montserrat configuration={{lineHeight: '17px'}}>
                      <a href="/api/auth/login">
                        <Montserrat htmlAttribute={'span'} type="link">Crea il tuo account</Montserrat>
                      </a> INGLESE <strong>film</strong> e le <strong>serie tv</strong> sulle quali hai messo gli occhi. <br />
                      Vota usando i nostri <Montserrat htmlAttribute={'span'} configuration={{color: theme.colors.mainBrandColors.dark, fontStyle: 'italic'}}>Aperitivini</Montserrat> che contengono la vitamina F (Felicitina). Tutto completamente gratuito.
                    </Montserrat>
                  )}
                </Montserrat>
              </WelcomeDescription>
            </Welcome>
          )}
        </Container>
      )}

      <TitlePage title="menuLinkTitleDiscover" />

      {/* Discover FILM */}
      <Row>
        <RowCards type="discover">
          {discoverMovieListState.map((item, index) => {
            return (
              <Card key={index} product={item} productType="productTypeFilm" className="card" type="discover" />
            )
          })}
        </RowCards>
        <GoTo fontSize="16px" text="goToDiscoverNewFilm" className="goto-rowcard" handleOnClick={() => onClose()} url="/search-results">
          <Icon
            fill={theme.colors.mainBrandColors.dark}
            strokeWidth={0}
            width="20px"
            height="20px"
          >
            <FireIcon />
          </Icon>
        </GoTo>
      </Row>

      {/* COMING SOON */}
      {/* <Row>
        <RowHeader>
          <Montserrat className="card-title" type="bold" configuration={{fontSize: isTablet ? 20 : 24, fontWeight: 600, lineHeight: "17.07px", color: theme.colors.element.light}}><FormattedMessage defaultMessage="sectionTitleComingOutFilm" id="sectionTitleComingOutFilm" /></Montserrat>

          {!isTablet && (
            <GoTo handleOnClick={() => onClose()} url="/search-results">
              <Icon 
                stroke={theme.colors.mainBrandColors.dark}
                width="18px"
                height="17px"
              >
                <ArrowNarrowRightIcon />
              </Icon>
            </GoTo>
          )}				
        </RowHeader>
        <RowCards type="default">
          <Card className="card" type="default"/>
          <Card className="card" type="default"/>
          <Card className="card" type="default"/>
          <Card className="card" type="default"/>
        </RowCards>
        {isTablet && (
          <GoTo className="goto-rowcard-mobile" handleOnClick={() => onClose()} url="/search-results">
            <Icon 
              stroke={theme.colors.mainBrandColors.dark}
              width="18px"
              height="17px"
            >
              <ArrowNarrowRightIcon />
            </Icon>
          </GoTo>
          )}
      </Row> */}

      {/* POPULAR PEOPLE */}
      {/* <Row>
        <RowHeader>
          <Montserrat className="card-title" type="bold" configuration={{fontSize: isTablet ? 20 : 24, fontWeight: 600, lineHeight: "17.07px", color: theme.colors.element.light}}><FormattedMessage defaultMessage="sectionTitlePopularPeople" id="sectionTitlePopularPeople" /></Montserrat>

          {!isTablet && (
            <GoTo handleOnClick={() => onClose()} url="/search-results">
              <Icon 
                stroke={theme.colors.mainBrandColors.dark}
                width="18px"
                height="17px"
              >
                <ArrowNarrowRightIcon />
              </Icon>
            </GoTo>
          )}				
        </RowHeader>
        <RowCards>
          <Card className="card" type="person" />
          <Card className="card" type="person" />
          <Card className="card" type="person" />
          <Card className="card" type="person" />
          <Card className="card" type="person" />
        </RowCards>
        {isTablet && (
          <GoTo className="goto-rowcard-mobile" handleOnClick={() => onClose()} url="/search-results">
            <Icon 
              stroke={theme.colors.mainBrandColors.dark}
              width="18px"
              height="17px"
            >
              <ArrowNarrowRightIcon />
            </Icon>
          </GoTo>
          )}
      </Row> */}

      {/* DISCOVER SERIE TV */}
      {/* <Row>
        <RowCards type="discover">
          <Card className="card" type="discover" />
          <Card className="card" type="discover" />
        </RowCards>
        <GoTo fontSize="16px" text="goToDiscoverNewTvSeries" className="goto-rowcard" handleOnClick={() => onClose()} url="/search-results">
          <Icon
            fill={theme.colors.mainBrandColors.dark}
            strokeWidth={0}
            width="20px"
            height="20px"
          >
            <FireIcon />
          </Icon>
        </GoTo>
      </Row> */}

      {/* POPULAR SERIE TV */}
      {/* <Row>
        <RowHeader>
          <Montserrat className="card-title" type="bold" configuration={{fontSize: isTablet ? 20 : 24, fontWeight: 600, lineHeight: "17.07px", color: theme.colors.element.light}}><FormattedMessage defaultMessage="sectionTitlePopularTvSeries" id="sectionTitlePopularTvSeries" /></Montserrat>

          {!isTablet && (
            <GoTo handleOnClick={() => onClose()} url="/search-results">
              <Icon 
                stroke={theme.colors.mainBrandColors.dark}
                width="18px"
                height="17px"
              >
                <ArrowNarrowRightIcon />
              </Icon>
            </GoTo>
          )}				
        </RowHeader>
        <RowCards type="default">
          <Card className="card" type="default"/>
          <Card className="card" type="default"/>
          <Card className="card" type="default"/>
          <Card className="card" type="default"/>
        </RowCards>
        {isTablet && (
          <GoTo className="goto-rowcard-mobile" handleOnClick={() => onClose()} url="/search-results">
            <Icon 
              stroke={theme.colors.mainBrandColors.dark}
              width="18px"
              height="17px"
            >
              <ArrowNarrowRightIcon />
            </Icon>
          </GoTo>
          )}
      </Row> */}
    </HomeContainer>
  );
}
