import Head from "next/head";
import { useDispatch, useSelector } from "react-redux";
import { Container, ProductDetailsContainer, ResultsContainer } from "../../../src/styles/Pages/creditsDetailsStyle";
import { useEffect, useState } from "react";
import useMediaQuery from "../../../src/hooks/useMediaQuery";
import { TitlePage } from "../../../src/atoms";
import Router, { useRouter } from "next/router";
import { langConverter, parseContext, tmdbApiKey } from "../../../src/js/utility";
import Tabs from "../../../src/atoms/Tabs";
import { Card } from "../../../src/components";

const creditTabsList = [
	{
		id: 'cast',
		label: 'Cast',
		icon: null
	},
	{
		id: 'troupe',
		label: 'Troupe',
		icon: null
	}
]

export async function getServerSideProps(context) {
  try {
    const query = parseContext(context.query);
    const resolvedUrl = parseContext(context.resolvedUrl).split('/')[1]
    const resCredits = await fetch(`https://api.themoviedb.org/3/${resolvedUrl}/${query.id}/credits?api_key=${tmdbApiKey}`);
    const creditsDetails = await resCredits.json();
    const resProductDetails = await fetch(`https://api.themoviedb.org/3/${resolvedUrl}/${query.id}/credits?api_key=${tmdbApiKey}`);
    const productDetails = await resProductDetails.json();
    return {
      props: {
        creditsDetails,
        productDetails,
        productTypeContext: resolvedUrl,
        query
      },
    };
  } catch (err) {
    console.error(err);
    return {
      props: {
        err: "Something went wrong",
      },
    };
  }
}

export default function ProductDetailsMovie({creditsDetails, productDetails, productTypeContext, query}) {
  const tabs = creditTabsList;
  const router = useRouter();
  const dispatch = useDispatch();
  
  const { slug, id: pid } = router.query;
  const [creditsDetailsState, setCreditsDetailsState] = useState({});
  const [productDetailsState, setProductDetailsState] = useState({});
  const [activeTab, setActiveTab] = useState(tabs[0]);
  const user = useSelector((state) => state.userData);
  const userLanguageState = useSelector((state) => state.userData.language);

  const isTablet = useMediaQuery(769);
  const isMobile = !useMediaQuery(426);

  useEffect(() => {
    setCreditsDetailsState(creditsDetails);
  }, [creditsDetails]);

  const getDetailsProduct = async () => {

    if (userLanguageState && creditsDetails) {
      const details = await fetch(
        `https://api.themoviedb.org/3/${productTypeContext}/${query.id}?api_key=${tmdbApiKey}&language=${langConverter(userLanguageState)}`
        ).then(res => res.json());

      const credits = await fetch(
        `https://api.themoviedb.org/3/${productTypeContext}/${query.id}/credits?api_key=${tmdbApiKey}`
        ).then(res => res.json());

      
      setCreditsDetailsState(
        {
          troupe: [...credits?.crew],
          cast: [...credits?.cast]
        }
      );
      setProductDetailsState(details);
    }
  };

  useEffect(() => {
    getDetailsProduct();
  }, [userLanguageState, creditsDetails, productDetails]);

  const onChangeTab = tab => {
    setActiveTab(tab);
  };

  return (
    <ProductDetailsContainer>
      <Head>
        <title>Credits {productDetailsState?.title}  | Aperifilm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#e30000" />
        <meta name="msapplication-TileColor" content="#ffc40d" />
        <meta name="theme-color" content="#ffffff"></meta>
      </Head>

      <TitlePage primaryTitle="pageTitleCredits" title={productDetailsState?.title} hasBackButton />

      <Container>
        <Tabs
          className="tabs" 
          selected={activeTab}
          onChange={onChangeTab}
          tabsList={tabs} 
        />
      </Container>

      <ResultsContainer>
        {
            <>
              {creditsDetailsState[activeTab.id]?.map((item, index) => (
                <Card key={index} product={item} productType="productTypePerson" className="card" type="person" role={item?.job || item?.department} />
              ))}
            </>
        }
      </ResultsContainer>
  
    </ProductDetailsContainer>
  );
}
