import Head from "next/head";
import { FormattedMessage } from "react-intl";
import { useSelector } from "react-redux";
import { Image, TitlePage } from "../src/atoms";
import { Container, ResultsContainer, TrendingContainer, Left, Right, PeopleContainer, Person} from "../src/styles/Pages/trendingStyle";
import { useEffect, useState } from "react";
import { Card, RowCard } from "../src/components";
import useMediaQuery from "../src/hooks/useMediaQuery";
import { genderPlaceholder, imgBasePath, langConverter, textToPath, tmdbApiKey } from "../src/js/utility";
import Tabs, { defaultTabsList } from "../src/atoms/Tabs";
import Montserrat from "../src/typography/montserrat";
import Router from 'next/router';

export async function getServerSideProps() {
  try {
    const resTrendingMovie = await fetch('https://api.themoviedb.org/3/trending/movie/week?api_key=e2330ecaa641a077ab62520c44ab636f');
    const trendingMovieList = await resTrendingMovie.json();

    const resTrendingTv = await fetch('https://api.themoviedb.org/3/trending/tv/week?api_key=e2330ecaa641a077ab62520c44ab636f');
    const trendingTvList = await resTrendingTv.json();
    
    const resTrendingPeople = await fetch('https://api.themoviedb.org/3/trending/person/week?api_key=e2330ecaa641a077ab62520c44ab636f');
    const trendingPeopleList = await resTrendingPeople.json();
    
    return {
      props: {
        trendingMovieList,
        trendingTvList,
        trendingPeopleList,
      },
    };
  } catch (err) {
    console.error(err);
    return {
      props: {
        err: "Something went wrong",
      },
    };
  }
}

export default function Trending({trendingMovieList, trendingTvList, trendingPeopleList}) {
  const tabs = defaultTabsList;
  const [trendingMovieListState, setTrendingMovieListState] = useState([]); 
  const [trendingTvListState, setTrendingTvListState] = useState([]);
  const [trendingPeopleListState, setTrendingPeopleListState] = useState([]);
  const [activeTab, setActiveTab] = useState(tabs[0]);
  const user = useSelector((state) => state.userData);
  const userLanguageState = useSelector((state) => state.userData.language);

  const isTablet = useMediaQuery(769);

  useEffect(() => {
    setTrendingMovieListState(trendingMovieList?.results?.slice(0, 10));
    setTrendingTvListState(trendingTvList?.results?.slice(0, 10));
    setTrendingPeopleListState(trendingPeopleList?.results?.slice(0, 10));
  }, [trendingMovieList, trendingPeopleList, trendingTvList])

  const onChangeTab = tab => {
    setActiveTab(tab);
  };

  return (
    <TrendingContainer>
      <Head>
        <title>Trending | Aperifilm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#e30000" />
        <meta name="msapplication-TileColor" content="#ffc40d" />
        <meta name="theme-color" content="#ffffff"></meta>
      </Head>

      {user?.email && (
        <Container>
          {user && Object.entries(user).map(([key, value], i) => {
            if (key !== 'list_products' && key !== 'favorite' && key !== 'voted' && key !== 'towatch') {
              return (
                <p key={i}>{i + 1} - {key}: {value}</p>
              )
            } 
            })}

            {user?.favorite && (
              <>
                <p><FormattedMessage defaultMessage={"menuLinkTitleFavorite"} id={"menuLinkTitleFavorite"} /></p>
                {user.favorite.map((elm, index) => (
                  <p key={index}>{elm.title}</p>
                ))}
              </>
            )}

            {user?.voted && (
              <>
                <p><FormattedMessage defaultMessage={"menuLinkTitleVoted"} id={"menuLinkTitleVoted"} /></p>
                {user.voted.map((elm, index) => (
                  <p key={index}>{elm.title}</p>
                ))}
              </>
            )}

            {user?.towatch && (
              <>
                <p><FormattedMessage defaultMessage={"menuLinkTitleToWatch"} id={"menuLinkTitleToWatch"} /></p>
                {user.towatch.map((elm, index) => (
                  <p key={index}>{elm.title}</p>
                ))}
              </>
            )}
            
        </Container>
      )}

      <TitlePage title="menuLinkTitleTrending" />

      <Container>
        <Tabs
          className="tabs" 
          selected={activeTab}
          onChange={onChangeTab}
          tabsList={tabs} 
        />

        <ResultsContainer>
          <Left>
            {/* Movie */}
            {
              activeTab.id === 'movie' && (
                <>
                  {trendingMovieListState.map((item, index) => (
                    <>
                      {isTablet ? (
                        <Card position={index + 1 < 10 ? `0${index+1}` : index+1} isCardTrending key={index} product={item} productType="productTypeFilm" className="card" />
                      ) : (
                        <Card 
                          key={index} 
                          product={item} 
                          type="trending" 
                          productType="productTypeFilm"
                          position={index + 1 < 10 ? `0${index+1}` : index+1}
                          className="card" 
                        />
                      )}
                    </>
                  ))}
                </>
              )
            }

            {/* Tv */}
            {
              activeTab.id === 'tv' && (
                <>
                  {trendingTvListState.map((item, index) => (
                    <>
                      {isTablet ? (
                        <Card position={index + 1 < 10 ? `0${index+1}` : index+1} isCardTrending key={index} product={item} productType="productTypeTvSeries" className="card" />
                      ) : (
                        <Card
                          key={index} 
                          product={item} 
                          type="trending" 
                          productType="productTypeTvSeries"
                          position={index + 1 < 10 ? `0${index+1}` : index+1}
                          className="card" 
                        />
                      )}
                    </>
                  ))}
                </>
              )
            }
          </Left>
          <Right>
            <Montserrat configuration={{fontSize: isTablet ? 20 : 24, fontWeight: 600}}>
              <FormattedMessage defaultMessage={"searchPeople"} id={"searchPeople"} />
            </Montserrat>
            <PeopleContainer>
              {trendingPeopleListState?.map((item, index) => (
                <Person
                  key={index}
                  onClick={() => Router.push(`/person/${textToPath(item?.name)}?id=${item?.id}`)}
                >
                  <Image 
                    className="main-image" 
                    src={item?.profile_path ? `${imgBasePath}${item?.profile_path}` : genderPlaceholder(item?.gender)}
                    alt={`${item?.name} photo`} 
                    width="90px"
                    height="90px"
                    layout="fixed" 
                  />
                  <Montserrat configuration={{fontSize: 12, fontWeight: 600}}>
                    {item?.name}
                  </Montserrat>
                </Person>
              ))}
            </PeopleContainer>
          </Right>
        </ResultsContainer>
      </Container>

    </TrendingContainer>
  );
}
